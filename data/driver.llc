//syntax_tests.llc

/// * Arguments should be non-mutable, as they are not values to contain, only values to refer to (this is more math than c)

func factorial (nat) -> nat
{
    factorial(0) = 1;
    factorial(n) = n * factorial(n - 1);
}

func is_greater_than_seven (int) -> bool
{
    is_greater_than_seven(n) where(n < 7) = false;
    is_greater_than_seven(_) = true; // will test top to bottom and return first pattern that matches
}

enum ResultFloat { Ok(float), Error }

func division (float, float) -> ResultFloat
{
    // alternatively you could do (float, float) -> (bool, float) to not define the enum but not as cool
    division(_, 0) = .Error; // Beef's inferring here we go
    division(x, y) = .Ok(x / y);
}

enum Thing { A, B, C, D, E, F }

func is_D (Thing)->bool{
    is_D(.D)=true;
    is_D(_) = false; // pattern matching for enums
}

func get_float_else_zero(ResultFloat) -> float
{
    get_float_else_zero(.Error) = 0;
    get_float_else_zero(.Ok(n)) = n;
}

func fibonacci (nat) -> nat
{
    .(0) = 0;
    .(1) = 1;
    .(n) = .(n-1) + .(n-2);
}