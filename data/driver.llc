//syntax_tests.llc

/// * Arguments should be non-mutable, as they are not values to contain, only values to refer to (this is more math than c)
/// Parenthesis are not needed actually, because we can infer type as func name T1, ..., Tn -> R1, ..., Rn {...}

func factorial (nat) -> nat
{
    factorial(0) = 1;
    factorial(n) = prod(n, factorial(sub(n, 1));
}

func is_greater_than_seven (int) -> bool
{
    is_greater_than_seven(n) where(less_than(n, 8)) = false;
    is_greater_than_seven(_) = true; // will test top to bottom and return first pattern that matches
}

enum ResultFloat { Ok(float), Error }

func division (float, float) -> ResultFloat
{
    // alternatively you could do (float, float) -> (bool, float) to not define the enum but not as cool
    division(_, 0) = .Error; // Beef's inferring here we go
    division(x, y) = .Ok(div(x, y);
}

enum Thing { A, B, C, D, E, F }

func is_D (Thing)->bool{
    is_D(.D)=true;
    is_D(_) = false; // pattern matching for enums
}

func get_float_else_zero ResultFloat -> float
{
    get_float_else_zero(.Error) = 0;
    get_float_else_zero(.Ok(n)) = n;
}

func fibonacci nat -> nat
{
    .(0) = 0;
    .(1) = 1;
    .(n) = add(.(sub(n, 1), .(sub(n, 2));
}

func unpack_complex complex -> real, real // I'm just making up types along the way
{
    unpack_complex(c) = (c.real, c.imaginary);
}

func add_negative int, int -> int
{
    add_negative(n, m) = add(n, sub(m)); // this is just for testing parsing multiple operators
}

impure func display_stuff int -> // impure functions can only be called from another impure function
{
    display_stuff(n) = print(n) // redundant but just to show how it works
    // we suppose print() is an impure function defined in stl
}